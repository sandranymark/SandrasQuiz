{
    "compilerOptions": {
        "target": "ES6",               // JavaScript-version att kompilera till
        "module": "commonjs",          // Vanligt modulsystem för Node.js och många projekt
        "outDir": "./dist",            // Var de kompilerade filerna ska placeras
        "strict": true,                // Aktiverar strikt typkontroll för bättre typer
        "esModuleInterop": true,       // Gör det enklare att importera CommonJS-moduler
        "forceConsistentCasingInFileNames": true, // Tvingar konsekvent användning av filnamn
        "skipLibCheck": true,          // Hoppar över typkontroll av deklarationsfiler
        "noImplicitAny": true,         // Förbjuder användning av 'any' utan explicit typ
        "noUnusedLocals": true,        // Flaggar oanvända lokala variabler
        "noUnusedParameters": true,    // Flaggar oanvända parametrar
        "noImplicitReturns": true,     // Flaggar funktioner som inte returnerar något värde
        "noFallthroughCasesInSwitch": true, // Förhindrar fallthrough i switch-satser
        "strictNullChecks": true,      // Ensures null and undefined are handled explicitly
        // Explicit hantering: Med strictNullChecks måste utvecklaren specificera om en variabel 
        //får vara null och hantera det om så är fallet, exempelvis genom en if-kontroll.
        "strictFunctionTypes": true,   // Säkerställer att funktionstyper kontrolleras strikt
    },
    "include": ["./src"],         // Inkluderar alla TypeScript-filer i src-mappen och dess undermappar
    "exclude": ["node_modules", "dist"] // Exkluderar node_modules och dist-mappen
}

// Egenskapen `"exclude"` specificerar en array av fil- eller katalogmönster som ska uteslutas från kompilationsprocessen. 
// I detta fall är katalogerna `node_modules` och `dist` exkluderade.

// Att exkludera katalogen `node_modules` är en vanlig praxis eftersom den innehåller tredjepartsbibliotek och beroenden 
// som inte är skapade av projektutvecklarna. 

// Dessa filer är redan kompilerade och behöver inte bearbetas av TypeScript-kompilatorn, 
// vilket hjälper till att snabba upp kompilationsprocessen och undvika potentiella konflikter eller fel.

// På samma sätt används katalogen `dist` vanligtvis för att lagra ut data från byggprocessen, 
// såsom kompilerade JavaScript-filer. Genom att exkludera denna katalog, 
// undviker TypeScript-kompilatorn att bearbeta de genererade filerna igen, 
// vilket förhindrar onödig omkompilering och potentiella problem med cirkulära beroenden.

// Sammantaget hjälper egenskapen `"exclude"` till att optimera TypeScript-kompilationsprocess
// genom att fokusera endast på de källfiler som behöver kompileras, vilket förbättrar byggprestandan 
// och minskar risken för fel.





/* Visit https://aka.ms/tsconfig to read more about this file */